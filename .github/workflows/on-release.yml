name: Test on every release

on:
  create:
    tags:
      - v*

jobs:
  pypi-install-test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
    - name: src => agentless
      run: |
        cd agentless
        mv src/__init__.py ./__init__.py
        rm src
        rmdir src
    - name: Build and publish
      env:
        STACKMANAGER_VERSION: ${{ github.event.release.tag_name }}
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python setup.py sdist bdist_wheel
        twine upload dist/* --verbose
    - name: Test installation
      run: |
        pip install agentless
         
  create-and-update-deb:
    needs: pypi-install-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo add-apt-repository ppa:jyrki-pulliainen/dh-virtualenv
        sudo apt-get update
        sudo apt-get install build-essential debhelper devscripts equivs dh-virtualenv python3.8 gnupg gnupg2

    - uses: oprypin/find-latest-tag@v1
      with:
        repository: CastellaniDavide/agentless
        releases-only: true 
      id : latest
    - name: Set envirorment varible(s)
      run: |
        echo "::set-output name=PUSH_PATH::$(curl -sL https://api.github.com/repos/CastellaniDavide/agentless/releases/latest | jq -r '.upload_url')"  
        echo "::set-output name=VERSION_TAG::$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')"
        echo "::set-output name=TAR_FILE::agentless_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').orig.tar.gz"
        echo "::set-output name=DEB_FILE::agentless_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')_amd64.deb"
        echo "::set-output name=CHANGES_FILE::agentless_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')_source.changes"
        echo "::set-output name=NUPKG_FILE::agentless.$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').nupkg"
        echo "::set-output name=NUPKG_FILE_PATH::./choco/agentless_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').nupkg"
      id: envirorment-variables

    - name: Create .deb file
      run: |
        cd debian
        sudo echo "3.0 (native)" > debian/source/format
        dpkg-buildpackage -us -uc

    - name: Upload deb
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.envirorment-variables.outputs.PUSH_PATH }}
        asset_path: ${{ steps.envirorment-variables.outputs.DEB_FILE }}
        asset_name: ${{ steps.envirorment-variables.outputs.DEB_FILE }}
        asset_content_type: application/zip

  build-for-ppa:
    needs: pypi-install-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo add-apt-repository ppa:jyrki-pulliainen/dh-virtualenv
        sudo apt-get update
        sudo apt-get install build-essential debhelper devscripts equivs dh-virtualenv python3.8 gnupg gnupg2

    - uses: oprypin/find-latest-tag@v1
      with:
        repository: CastellaniDavide/agentless
        releases-only: true 
      id : latest
    - name: Set envirorment varible(s)
      run: |
        echo "::set-output name=PUSH_PATH::$(curl -sL https://api.github.com/repos/CastellaniDavide/agentless/releases/latest | jq -r '.upload_url')"  
        echo "::set-output name=VERSION_TAG::$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')"
        echo "::set-output name=TAR_FILE::agentless_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').orig.tar.gz"
        echo "::set-output name=DEB_FILE::agentless_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')_amd64.deb"
        echo "::set-output name=CHANGES_FILE::agentless_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')_source.changes"
        echo "::set-output name=NUPKG_FILE::agentless.$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').nupkg"
        echo "::set-output name=NUPKG_FILE_PATH::./choco/agentless_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').nupkg"
      id: envirorment-variables

    - name: gpg import 
      run: |
        #echo "${{ secrets.GPG_KEY }}" > key.txt
        #LC_ALL=C tr -cd 0-9a-fA-F < key.txt | xxd -r -p > key.asc
        #gpg --batch --passphrase ${{ secrets.GPG_PWS }} --import key.asc
        #sudo echo "export GPGKEY=${{ secrets.GPG_KEY }}" >> ~/.bashrc
        echo "${{ secrets.GPG_PUBKEY }}" > pubkey.txt
        echo "${{ secrets.GPG_SECKEY }}" > seckey.txt
        echo "${{ secrets.GPG_OTRUST }}" > otrust.txt
        LC_ALL=C tr -cd 0-9a-fA-F < pubkey.txt | xxd -r -p > pubkey.asc
        LC_ALL=C tr -cd 0-9a-fA-F < seckey.txt | xxd -r -p > seckey.asc
        gpg --batch --import pubkey.asc
        gpg --batch --passphrase ${{ secrets.GPG_PWS }} --import seckey.asc
        #gpg --import-ownertrust otrust.txt
        sudo echo "export GPGKEY=${{ secrets.GPG_KEY_ID }}" >> ~/.bashrc
        gpg --list-secret-keys

    - name: Create Debian package
      run: |
        tar -czvf ${{ steps.envirorment-variables.outputs.TAR_FILE }} debian/
        cd ./debian/
        debuild -S -sa -k${{ secrets.GPG_KEY_ID }} -p"gpg --batch --passphrase ${{ secrets.GPG_PWS }} --pinentry-mode loopback"
    
    - name: Checks files
      run: |
        sudo apt install tree
        tree

    - name: dput
      run: |
        dput ppa:castellanidavide/school ${{ steps.envirorment-variables.outputs.CHANGES_FILE }}

  test-choco:
    needs: pypi-install-test
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.8'
        architecture: 'x64'

    - uses: oprypin/find-latest-tag@v1
      with:
        repository: CastellaniDavide/agentless
        releases-only: true 
      id : latest
    - name: Set envirorment varible(s)
      run: |
        echo "::set-output name=PUSH_PATH::$(curl -sL https://api.github.com/repos/CastellaniDavide/agentless/releases/latest | jq -r '.upload_url')"  
        echo "::set-output name=VERSION_TAG::$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')"
        echo "::set-output name=TAR_FILE::agentless_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').orig.tar.gz"
        echo "::set-output name=DEB_FILE::agentless_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')_amd64.deb"
        echo "::set-output name=CHANGES_FILE::agentless_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')_source.changes"
        echo "::set-output name=NUPKG_FILE::agentless.$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').nupkg"
        echo "::set-output name=NUPKG_FILE_PATH::./choco/agentless_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').nupkg"
    - name: Try to build
      run: |
        cd choco 
        choco pack
        choco install python
        choco install agentless -d-v -s . --pre -y --force

  publish-choco:
    #needs: test-choco
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.8'
        architecture: 'x64'
        
    - uses: oprypin/find-latest-tag@v1
      with:
        repository: CastellaniDavide/agentless
        releases-only: true 
      id : latest
    - name: Set envirorment varible(s)
      run: |
        echo "::set-output name=PUSH_PATH::$(curl -sL https://api.github.com/repos/CastellaniDavide/agentless/releases/latest | jq -r '.upload_url')"  
        echo "::set-output name=VERSION_TAG::$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')"
        echo "::set-output name=TAR_FILE::agentless_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').orig.tar.gz"
        echo "::set-output name=DEB_FILE::agentless_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')_amd64.deb"
        echo "::set-output name=CHANGES_FILE::agentless_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//')_source.changes"
        echo "::set-output name=NUPKG_FILE::agentless.$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').nupkg"
        echo "::set-output name=NUPKG_FILE_PATH::./choco/agentless_$(echo ${{ steps.latest.outputs.tag }} | sed 's/v//').nupkg"
      id: envirorment-variables
    - name: Build & Publish
      run: |
        cd choco
        choco apikey --key ${{ secrets.CHOCO_APIKEY }} --source https://push.chocolatey.org/
        choco pack
        choco push .\agentless.01.01.nupkg --source https://push.chocolatey.org/
        #choco push .\${{ steps.envirorment-variables.outputs.NUPKG_FILE }} --source https://push.chocolatey.org/
        move ./* ../

    #- name: Upload nupkg
     # uses: actions/upload-release-asset@v1
      #env:
        #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #with:
        #upload_url: ${{ steps.envirorment-variables.outputs.PUSH_PATH }}
        #asset_path: ${{ steps.envirorment-variables.outputs.NUPKG_FILE }}
        #asset_name: ${{ steps.envirorment-variables.outputs.NUPKG_FILE }}
        #asset_content_type: application/zip